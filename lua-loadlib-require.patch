diff -uNr lua-orig/README.pld lua-loadlib/README.pld
--- lua-orig/README.pld	Thu Jan  1 01:00:00 1970
+++ lua-loadlib/README.pld	Sun Dec  9 02:17:13 2001
@@ -0,0 +1,33 @@
+This version included in PLD distribution contains several additional
+features compared to stock lua-4.0.
+
+1. Support for loading shared libraries in lua developed for lua-4.0 by
+XTG Systems http://www.xtgsystems.com/lua/
+
+2. Function require() backported from lua-4.1alpha. It's basically the same
+as dofile(), only the file is searched in LUA_PATH.
+
+3. LUA_PATH can be defined with -e option, or by setting LUA_PATH
+environment variable. The default is
+   
+ /;./;/usr/lib/lua/;/usr/share/lua/;/usr/local/lib/lua/;/usr/local/share/lua/
+
+LUA_PATH global is set during lua setup in lua_baselibopen(), so it's
+guaranteed to be set (i.e. no need to check if its value is non-nil).
+   
+Note that if you want the path element treated as a directory, you have to
+end it with "/". Otherwise "/usr/share/lua" + "lib.lua" is interpreted as
+"/usr/share/lualib.lua". (I could insert this slash, but I decided to
+follow this ``feature'' from lua-4.1alpha implementation)
+
+4. Loadlib is modified in such a way, that it also searches its file in
+LUA_PATH. As a last resort it tries to load it in the form given on its
+invocation, depending on libdl's search mechanisms.
+
+The second modification to loadlib() is that it now can take only one
+parameter. If there is no function name given, loadlib() constructs it from
+the library name. It throws everything after the first dot (".") (if it
+exists), prepends "lua_" and appends "open".
+
+loadlib("env.so") is therefore equivalent to loadlib("env.so","lua_envopen"),
+loadlib("env.dll") is equivalent to loadlib("env.dll","lua_envopen") etc.
diff -uNr lua-orig/include/lua.h lua-loadlib/include/lua.h
--- lua-orig/include/lua.h	Tue Oct 31 13:44:07 2000
+++ lua-loadlib/include/lua.h	Sun Dec  9 01:34:23 2001
@@ -56,6 +56,15 @@
 #define LUA_ERRMEM	4
 #define LUA_ERRERR	5
 
+/* constants for lua_require and lua_loadlib */
+
+#define LUA_PATH		"LUA_PATH"
+#define LUA_PATH_SEP		";"
+
+#ifndef LUA_PATH_DEFAULT
+#define LUA_PATH_DEFAULT	"/;./;/usr/lib/lua/;/usr/share/lua/;" \
+				"/usr/local/lib/lua/;/usr/local/share/lua/"
+#endif
 
 typedef struct lua_State lua_State;
 
diff -uNr lua-orig/src/lib/Makefile lua-loadlib/src/lib/Makefile
--- lua-orig/src/lib/Makefile	Wed Sep 20 04:13:52 2000
+++ lua-loadlib/src/lib/Makefile	Sun Dec  9 01:34:23 2001
@@ -6,9 +6,10 @@
 
 # actually only used in liolib.c
 EXTRA_DEFS= $(POPEN)
+CFLAGS += -D_GNU_SOURCE
 
-OBJS= lauxlib.o lbaselib.o ldblib.o liolib.o lmathlib.o lstrlib.o
-SRCS= lauxlib.c lbaselib.c ldblib.c liolib.c lmathlib.c lstrlib.c
+OBJS= lauxlib.o lbaselib.o ldblib.o liolib.o lmathlib.o lstrlib.o loadlib.o
+SRCS= lauxlib.c lbaselib.c ldblib.c liolib.c lmathlib.c lstrlib.c loadlib.c
 
 T= $(LIB)/liblualib.a
 
diff -uNr lua-orig/src/lib/lbaselib.c lua-loadlib/src/lib/lbaselib.c
--- lua-orig/src/lib/lbaselib.c	Mon Nov  6 14:45:18 2000
+++ lua-loadlib/src/lib/lbaselib.c	Sun Dec  9 01:34:23 2001
@@ -16,6 +16,7 @@
 #include "lauxlib.h"
 #include "luadebug.h"
 #include "lualib.h"
+#include "loadlib.h"
 
 
 
@@ -269,6 +270,51 @@
   return passresults(L, lua_dofile(L, fname), oldtop);
 }
 
+static int luaB_require (lua_State *L) {
+  char *path;
+
+  luaL_check_string(L, 1);
+  lua_settop(L, 1);
+  lua_getglobal(L, LUA_PATH);  /* get path */
+  path = lua_tostring(L, 2);
+
+  lua_getregistry(L);
+  lua_pushstring(L, LUA_PATH);
+  lua_gettable(L, 3);  /* get book-keeping table */
+  if (lua_isnil(L, 4)) {  /* no book-keeping table? */
+    lua_pop(L, 1);  /* pop the `nil' */
+    lua_newtable(L);  /* create book-keeping table */
+    lua_pushstring(L, LUA_PATH);
+    lua_pushvalue(L, -2);  /* duplicate table to leave a copy on stack */
+    lua_settable(L, 3);  /* store book-keeping table in registry */
+  }
+  lua_pushvalue(L, 1);
+  lua_gettable(L, 4);  /* check package's name in book-keeping table */
+  if (!lua_isnil(L, -1))  /* is it there? */
+    return 0;  /* package is already loaded */
+  else {  /* must load it */
+    for (;;) {  /* traverse path */
+      int res;
+      int l = strcspn(path, LUA_PATH_SEP);  /* find separator */
+      lua_pushlstring(L, path, l);  /* directory name */
+      lua_pushvalue(L, 1);  /* package name */
+      lua_concat(L, 2);  /* concat directory with package name */
+      res = lua_dofile(L, lua_tostring(L, -1));  /* try to load it */
+      lua_settop(L, 4);  /* pop string and eventual results from dofile */
+      if (res == 0) break;  /* ok; file done */
+      else if (res != LUA_ERRFILE)
+        lua_error(L, NULL);  /* error running package; propagate it */
+      if (*(path+l) == '\0')  /* no more directories? */
+        luaL_verror(L, "could not load package `%.20s' from path `%.200s'",
+                    lua_tostring(L, 1), lua_tostring(L, 2));
+      path += l+1;  /* try next directory */
+    }
+  }
+  lua_pushvalue(L, 1);
+  lua_pushnumber(L, 1);
+  lua_settable(L, 4);  /* mark it as loaded */
+  return 0;
+}
 
 static int luaB_call (lua_State *L) {
   int oldtop;
@@ -626,6 +672,7 @@
   {"rawset", luaB_rawset},
   {"rawgettable", luaB_rawget},  /* for compatibility */
   {"rawsettable", luaB_rawset},  /* for compatibility */
+  {"require", luaB_require},
   {"setglobal", luaB_setglobal},
   {"settag", luaB_settag},
   {"settagmethod", luaB_settagmethod},
@@ -647,5 +694,20 @@
   lua_pushstring(L, LUA_VERSION);
   lua_setglobal(L, "_VERSION");
   deprecated_funcs(L);
-}
 
+/* additions by rrw */
+
+  lua_loadlibopen(L);
+  lua_getglobal(L, LUA_PATH);  /* get path */
+  if (lua_isstring(L, 1)) {  /* is LUA_PATH defined? */
+    lua_pop(L, 1);  /* pop old global value */
+  } else {
+    char *path;
+  
+    lua_pop(L, 1);  /* pop old global value */
+    path = getenv(LUA_PATH);  /* try environment variable */
+    if (path == NULL) path = LUA_PATH_DEFAULT;  /* else use default */
+    lua_pushstring(L, path);
+    lua_setglobal(L, LUA_PATH);
+  }
+}
diff -uNr lua-orig/src/lib/loadlib.c lua-loadlib/src/lib/loadlib.c
--- lua-orig/src/lib/loadlib.c	Thu Aug  2 19:26:14 2001
+++ lua-loadlib/src/lib/loadlib.c	Sun Dec  9 02:07:03 2001
@@ -29,23 +29,58 @@
 int ldlib_loadlib( lua_State *L ) {
    char errmsg[256]; int n;
    HMODULE hlib; INITFUN fun;
-   const char *slib, *sfun, *x=NULL;
+   const char *slib, *sfun, *x=NULL, *path;
    int tag_hlib = (int) lua_tonumber(L,-2); lua_pop(L,2);
    
    n=lua_gettop(L);
    slib = lua_tostring(L,1); 
-   sfun = lua_tostring(L,2); 
+   if (n>1) {
+      sfun = lua_tostring(L,2); 
+   } else {
+      n = 2;
+      sfun = lua_tostring(L,1);
+      lua_pushstring(L, "lua_");
+      if (strchr(sfun,'.')) {
+	 lua_pushlstring(L, sfun, (int)strchr(sfun,'.') - (int)sfun);
+      } else {
+	 lua_pushstring(L, sfun);
+      }
+      lua_pushstring(L, "open");
+      lua_concat(L, 3);
+      sfun = lua_tostring(L, 2);
+   }
    if(n==3) x = lua_tostring(L,3); lua_pop(L,n);
 
+   lua_getglobal(L,"LUA_PATH");
+   path = lua_tostring(L,-1);
+   lua_pop(L,1);
+   
    lua_getglobal(L,"_LOADLIB");
    lua_pushstring(L,slib); lua_rawget(L,1);
    
    if( lua_isnil(L,2) ) {
-      hlib = DLOPEN( slib );
-      
-      if( hlib==NULL ) { 
+
+    for (;;) {  /* traverse path */
+      int l = strcspn(path, LUA_PATH_SEP);  /* find separator */
+      lua_pushlstring(L, path, l);  /* directory name */
+      lua_pushstring(L, slib);  /* package name */
+      lua_concat(L, 2);  /* concat directory with package name */
+      hlib = DLOPEN(lua_tostring(L, -1));  /* try to load it */
+      lua_pop(L, 1);
+
+      if (hlib) break;  /* ok; file done */
+      if (*(path+l) == '\0') break; /* no more directories? */
+      path += l+1;  /* try next directory */
+    }
+
+      if (!hlib) hlib = DLOPEN(slib);
+
+      if(!hlib) { 
          _snprintf( errmsg, sizeof(errmsg)-1, "Cannot load plug-in library %s.", slib ); errmsg[sizeof(errmsg)-1]=0;
-         if( x && *x=='x' ) { lua_settop(L,0); lua_pushnil(L); lua_pushstring(L,errmsg); return 2; }
+         if( x && *x=='x' ) {
+	    lua_settop(L,0); lua_pushnil(L); lua_pushstring(L,errmsg);
+	    return 2;
+	 }
          lua_error(L,errmsg);
          return 0;
       }
@@ -61,7 +96,10 @@
    fun = (INITFUN) DLSYM(hlib,sfun);
    if( fun==NULL ) { 
       _snprintf( errmsg, sizeof(errmsg)-1, "Cannot locate function %s within plug-in library %s.", sfun, slib ); errmsg[sizeof(errmsg)-1]=0;
-      if( x && *x=='x' ) { lua_settop(L,0); lua_pushnil(L); lua_pushstring(L,errmsg); return 2; }
+      if( x && *x=='x' ) {
+	 lua_settop(L,0); lua_pushnil(L); lua_pushstring(L,errmsg);
+	 return 2;
+      }
       lua_error(L,errmsg);
       return 0;
    }
diff -uNr lua-orig/src/lib/loadlib.h lua-loadlib/src/lib/loadlib.h
--- lua-orig/src/lib/loadlib.h	Thu Aug  2 19:24:22 2001
+++ lua-loadlib/src/lib/loadlib.h	Sun Dec  9 02:06:24 2001
@@ -18,6 +18,7 @@
 /* ==================================================== */
 #include <stdlib.h>
 #include <stdio.h>
+#include <string.h>
 /* ==================================================== */
 #include "lua.h"
 /* ==================================================== */
diff -uNr lua-orig/src/lua/Makefile lua-loadlib/src/lua/Makefile
--- lua-orig/src/lua/Makefile	Fri Mar 31 15:52:56 2000
+++ lua-loadlib/src/lua/Makefile	Sun Dec  9 01:34:23 2001
@@ -14,7 +14,7 @@
 all: $T
 
 $T: $(OBJS) $(LIB)/liblua.a $(LIB)/liblualib.a
-	$(CC) -o $@ $(OBJS) -L$(LIB) -llua -llualib $(EXTRA_LIBS)
+	$(CC) -o $@ $(OBJS) -L$(LIB) -llua -llualib -ldl $(EXTRA_LIBS)
 
 $(LIB)/liblua.a:
 	cd ..; $(MAKE)
